<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;

            --secondary: #f4f4f5;
            --text: #18181b;
            --text-light: #71717a;
            --border: #e4e4e7;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: system-ui, -apple-system, sans-serif;
        }

        body {
            background: #fafafa;
            color: var(--text);
            line-height: 1.5;
        }

        .container {
            max-width: none;
            width: 100%;
            margin: 0 auto;
            padding: 2rem;
        }

        .breadcrumb {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            margin-bottom: 2rem;
            color: var(--text-light);
        }

        .breadcrumb a {
            color: var(--text);
            text-decoration: none;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
            width: auto;
        }

        .products-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
            background: white;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .products-table th {
            text-align: left;
            padding: 1rem;
            background: var(--secondary);
            font-weight: 500;
        }

        .products-table td {
            padding: 1rem;
            border-top: 1px solid var(--border);
        }

        .address-section {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .add-address {
            color: var(--primary);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .coupon-section {
            display: flex;
            gap: 0.5rem;
            margin: 2rem 0;
        }

        .input {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            width: 100%;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-secondary {
            background: var(--secondary);
            color: var(--text);
        }

        .order-summary {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            position: sticky;
            top: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .total-row {
            font-weight: 600;
            font-size: 1.125rem;
            border-top: 1px solid var(--border);
            padding-top: 1rem;
        }

        .payment-section {
            margin-top: 2rem;
        }

        .complete-purchase {
            width: 100%;
            padding: 0.875rem;
            background: var(--text);
            color: white;
            border: none;
            border-radius: 0.375rem;
            font-weight: 500;
            margin-top: 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .complete-purchase:hover {
            opacity: 0.9;
        }
    </style>
</head>
<%- include('../partials/user/header.ejs') %>

    <body>
        <div style="height: 5rem;"></div>
        <div class="container">
            <div class="breadcrumb">
                <a href="/">Home</a>
                <span>/</span>
                <a href="/cart">Cart</a>
                <span>/</span>
                <span>Checkout</span>
            </div>

            <div class="checkout-grid">
                <div class="main-content">
                    <table class="products-table">
                        <thead>
                            <tr>
                                <th>Products</th>
                                <th>ProductName</th>
                                <th>price</th>
                                <th>Quantity</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cart.forEach(function(item) { %>
                                <% const product=item.productId || {}; %>
                                    <tr>
                                        <td>
                                            <a href="/productDetails?product=<%= product._id %>" class="block">
                                                <img src="<%= product.productImage[0] %>"
                                                    class="card-img-top rounded-top" style="width: 100px; height: auto;"
                                                    alt="<%= product.productName %>"></a>
                                            <% if (product.quantity===0) { %>
                                                <span style="color: red; font-weight: bold;">Out of Stock</span>
                                                <% } %>
                                        </td>
                                        <td>
                                            <%= product.productName || 'Product Name Missing' %>
                                        </td>
                                        <td>₹<%= product.salePrice ? product.salePrice.toFixed(2) : '0.00' %>
                                        </td>
                                        <td>
                                            <%= item.quantity || 1 %>
                                        </td>
                                    </tr>
                                    <% }); %>

                        </tbody>
                    </table>

                    <div class="address-section">
                        <% if (addresses.length> 0) { %>
                            <% addresses.forEach(function(address) { %>
                                <div class="address-card">
                                    <input type="radio" name="address" value="<%= address._id %>" <%=address.default
                                        ? 'checked' : '' %>
                                    >
                                    <div>
                                        <strong>
                                            <%= address.name %>
                                        </strong>
                                        <p>
                                            <%= address.phone %>
                                        </p>
                                        <p>
                                            <%= address.city %>, <%= address.state %>
                                                    <%= address.pincode %>
                                        </p>
                                    </div>
                                    <div class="address-actions">
                                        <a href="/edit-address/<%= address._id %>" class="edit-button">Edit</a>
                                        <a href="/delete-address/<%= address._id %>" class="delete-button"
                                            onclick="return confirm('Are you sure you want to delete this address?')">Delete</a>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <p>No addresses found. Please add an address.</p>
                                        <% } %>

                                            <!-- Add New Address Link -->
                                            <a href="/address" class="add-address">+ Add New Address</a>
                    </div>
                    <div class="coupon-section">
                        <select id="couponDropdown" class="input">
                            <option value="">Select a Coupon</option>
                            <% if (coupons && coupons.length> 0) { %>
                                <% coupons.forEach(coupon=> { %>
                                    <option value="<%= coupon.code %>">
                                        <%= coupon.code %> -
                                            <% if (coupon.type==='percentage' ) { %>
                                                <%= coupon.discount %>% off
                                                    <% } else if (coupon.type==='flat' ) { %>
                                                        ₹<%= coupon.discount %> off
                                                            <% } %>
                                                                (Expires on: <%= new
                                                                    Date(coupon.expiryDate).toLocaleDateString() %>)
                                    </option>
                                    <% }); %>
                                        <% } else { %>
                                            <option disabled>No coupons available</option>
                                            <% } %>
                        </select>
                        <button id="applyCoupon" class="btn btn-primary">Apply</button>
                    </div>
                    <div id="couponFeedback" style="margin-top: 10px; color: red; display: none;"></div>
                    <div class="summary-row" id="discountRow" style="display: none;">
                        <span>Discount:</span>
                        <span id="discountAmount">₹0.00</span>
                    </div>
                </div>

                <div class="order-summary">
                    <h2 style="font-size: x-large;">Order Summary</h2>
                    <div class="summary-content">
                        <div class="summary-row">
                            <span>Subtotal:</span>
                            <span>₹<%= subtotal.toFixed(2) %></span>
                        </div>
                        <div class="summary-row">
                            <span>Delivery:</span>
                            <span>
                                <%= shipping===0 ? 'Free' : '₹' + shipping.toFixed(2) %>
                            </span>
                        </div>
                        <div class="summary-row total-row">
                            <span>Total:</span>
                            <span>₹<%= (subtotal + shipping).toFixed(2) %></span>
                        </div>
                    </div>

                    <div class="payment-section">
                        <h3>Payment</h3>
                        <select class="input" name="payment_method">
                            <option value="">Select Payment Method</option>
                            <option value="cod">Cash on Delivery</option>
                            <option value="razorpay">Razorpay</option>
                            <option value="Wallet">Wallet</option>

                        </select>
                        <button class="complete-purchase" type="button"
                            style="text-decoration: none; color: rgb(255, 255, 255); display: inline-block; padding: 10px 20px; background-color: #007bff; border-radius: 5px; text-align: center;">
                            Place Order
                        </button>

                        <div class="loading-spinner" style="display: none; margin-top: 10px; text-align: center;">
                        </div>
                    </div>
                </div>
            </div>
            <div id="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>
            <div>
                <%- include('../partials/user/footer.ejs') %>
            </div>
            <script>
                document.querySelector('.complete-purchase').addEventListener('click', async function (e) {
                    e.preventDefault();

                    const cart = JSON.parse('<%- JSON.stringify(cart) %>');
                    const subtotal = `<%= subtotal %>`;
                    const shipping = `<%= shipping %>`;

                    const selectedAddressElement = document.querySelector('input[name="address"]:checked');
                    if (!selectedAddressElement) {
                        const toast = document.createElement('div');
                        toast.textContent = "Please select a delivery address";
                        toast.style.position = 'fixed';
                        toast.style.top = '20px';
                        toast.style.right = '20px';
                        toast.style.backgroundColor = '#ff0000';
                        toast.style.color = 'white';
                        toast.style.padding = '10px 20px';
                        toast.style.borderRadius = '5px';
                        toast.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
                        document.body.appendChild(toast);

                        setTimeout(() => {
                            toast.remove();
                        }, 3000);

                        return;
                    }

                    const addressContainer = selectedAddressElement.closest('.address-card');
                    const addressDetails = {
                        id: selectedAddressElement.value,
                        name: addressContainer.querySelector('strong').innerText,
                        phone: addressContainer.querySelector('p:nth-of-type(1)').innerText,
                        cityStatePincode: addressContainer.querySelector('p:nth-of-type(2)').innerText,
                    };
                    const paymentMethod = document.querySelector('select[name="payment_method"]').value.trim();
                    if (!paymentMethod) {
                        const toast = document.createElement('div');
                        toast.textContent = "Please select a payment method";
                        toast.style.position = 'fixed';
                        toast.style.top = '20px';
                        toast.style.right = '20px';
                        toast.style.backgroundColor = '#ff4d4d';
                        toast.style.color = 'white';
                        toast.style.padding = '10px 20px';
                        toast.style.borderRadius = '5px';
                        toast.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
                        document.body.appendChild(toast);

                        setTimeout(() => {
                            toast.remove();
                        }, 3000);

                        return;
                    }
                    const hasOutOfStock = cart.some(item => item.productId.quantity === 0);
                    if (hasOutOfStock) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Out of Stock',
                            text: 'One or more products in your cart are out of stock. Please remove them before proceeding.',
                        });
                        return;
                    }
                    const totalPriceElement = document.querySelector('.total-row span:last-child');
                    const updatedTotalPrice = parseFloat(totalPriceElement.textContent.replace('₹', '').replace(',', ''));
                    const orderDetails = {
                        products: cart.map(item => ({
                            productId: item.productId._id,
                            quantity: item.quantity,
                        })),
                        totalPrice: updatedTotalPrice,
                        discount: discount || 0,
                        address: addressDetails,
                        paymentMethod: paymentMethod,
                    };
                    console.log("Order Details: ", orderDetails);

                    if (paymentMethod === 'cod') {
                        fetch('/checkout', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(orderDetails)
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to place order');
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.orderDetails) {
                                    Swal.fire({
                                        title: "Order Placed Successfully!",
                                        text: "Your order will be delivered soon",
                                        icon: "success",
                                        timer: 3000,
                                        showConfirmButton: false
                                    }).then(() => {
                                        window.location.href = `/order-success/${data.orderDetails._id}`;
                                    });
                                }
                            })
                            .catch(err => console.error("Error placing order:", err));
                        console.log("Order Details: ", orderDetails);
                    } else if (paymentMethod === 'razorpay') {
                        fetch('/create-order', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(orderDetails)
                        })
                            .then(response => { console.log("Raw Response : ", response); return response.json() })
                            .then(data => {
                                if (data.success) {
                                    var options = {
                                        "key": "rzp_test_i5tp6dXFIpR66Q",
                                        "amount": data.order.amount,
                                        "currency": "INR",
                                        "name": "shoe vault",
                                        "description": "Test Transaction",
                                        "order_id": data.order.id,
                                        "handler": async function (response) {
                                            try {
                                                const verificationResponse = await fetch('/place-order', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json',
                                                    },
                                                    body: JSON.stringify({
                                                        payment_id: response.razorpay_payment_id,
                                                        order_id: response.razorpay_order_id,
                                                        signature: response.razorpay_signature,
                                                        products: orderDetails.products,
                                                        totalPrice: orderDetails.totalPrice,
                                                        address: orderDetails.address,
                                                        paymentMethod: orderDetails.paymentMethod,
                                                    }),
                                                });

                                                const verificationResult = await verificationResponse.json();
                                                if (verificationResult.success) {
                                                    Swal.fire({
                                                        title: "Order Placed Successfully!",
                                                        text: "Your order will be delivered soon",
                                                        icon: "success",
                                                        timer: 3000,
                                                        showConfirmButton: false
                                                    });

                                                    window.location.href = `/razorpay-successpage/${verificationResult.orderId}`;
                                                } else {
                                                    Swal.fire("Payment Failed", "Something went wrong!", "error");
                                                }
                                            } catch (error) {
                                                console.error("Error verifying payment:", error);
                                                Swal.fire("Payment Failed", "Something went wrong!", "error");
                                            }
                                        },
                                    };

                                    const rzp1 = new Razorpay(options);
                                    rzp1.open();
                                } else {
                                    console.log("API Failed ");

                                }
                            })
                            .catch(err => console.error("Error creating Razorpay order:", err));
                    }
                    else if (paymentMethod === "Wallet") {
                        fetch('/paywallet', {
                            method: "POST",
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(orderDetails)
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.orderId) {
                                    Swal.fire({
                                        title: "Order Placed Successfully!",
                                        text: "Your order will be delivered soon.",
                                        icon: "success",
                                        timer: 3000,
                                        showConfirmButton: false
                                    });
                                    window.location.href = `/order-success/${data.orderId}`;
                                } else {
                                    Swal.fire("Payment Failed", data.message || "Something went wrong!", "error");
                                }
                            })
                            .catch(err => {
                                console.error("Error processing wallet payment:", err);
                                Swal.fire("Payment Failed", "Something went wrong!", "error");
                            });
                    }

                });
                let discount = 0; // Initialize discount

                document.getElementById('applyCoupon').addEventListener('click', async () => {
                    const couponCode = document.getElementById('couponDropdown').value.trim();
                    const subtotal = parseFloat(`<%= subtotal %>`);

                    if (!couponCode) {
                        document.getElementById('couponFeedback').textContent = "Please enter a coupon code.";
                        document.getElementById('couponFeedback').style.display = "block";
                        return;
                    }

                    try {
                        const response = await fetch('/validate-coupon', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ couponcode: couponCode, subtotal }),
                        });

                        const data = await response.json();
                        if (data.success) {
                            discount = data.discount; // Update the discount value
                            document.getElementById('discountRow').style.display = "flex";
                            document.getElementById('discountAmount').textContent = `₹${data.discount.toFixed(2)}`;
                            document.getElementById('couponFeedback').style.display = "none";

                            // Update total price
                            const totalRow = document.querySelector('.total-row span:last-child');
                            totalRow.textContent = `₹${data.newTotal.toFixed(2)}`;
                            const toastContainer = document.getElementById('toast-container');
                            const toast = document.createElement('div');
                            toast.textContent = data.message;
                            toast.style.backgroundColor = "#4caf50";
                            toast.style.color = "white";
                            toast.style.padding = "10px 20px";
                            toast.style.marginBottom = "10px";
                            toast.style.borderRadius = "5px";
                            toast.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)";
                            toast.style.fontSize = "14px";

                            toastContainer.appendChild(toast);

                            setTimeout(() => {
                                toast.remove();
                            }, 2000);
                        } else {
                            document.getElementById('couponFeedback').textContent = data.message;
                            document.getElementById('couponFeedback').style.display = "block";
                        }
                    } catch (error) {
                        console.error('Error applying coupon:', error);
                        document.getElementById('couponFeedback').textContent = "Something went wrong. Please try again.";
                        document.getElementById('couponFeedback').style.display = "block";
                    }
                });

            </script>

    </body>

</html>