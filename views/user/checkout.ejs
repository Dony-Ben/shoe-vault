<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Complete Your Order</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2563eb;
            --primary-hover: #1d4ed8;
            --secondary: #f8fafc;
            --accent: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --text-primary: #0f172a;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --border: #e2e8f0;
            --border-light: #f1f5f9;
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --radius: 12px;
            --radius-sm: 8px;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .checkout-container {
            padding-top: 56px;
            /* Ensures content is not hidden behind fixed header */
        }

        @media (max-width: 768px) {
            .container {
                margin-top: 56px;
            }
        }

        /* Breadcrumb */
        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2rem;
            padding: 1rem 1.5rem;
            background: var(--bg-primary);
            border-radius: var(--radius);
            box-shadow: var(--shadow-sm);
        }

        .breadcrumb a {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s;
        }

        .breadcrumb a:hover {
            color: var(--primary);
        }

        .breadcrumb .separator {
            color: var(--text-muted);
        }

        .breadcrumb .current {
            color: var(--primary);
            font-weight: 600;
        }

        /* Main Layout */
        .checkout-layout {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        @media (min-width: 1024px) {
            .checkout-layout {
                grid-template-columns: 2fr 1fr;
                gap: 3rem;
            }
        }

        /* Card Component */
        .card {
            background: var(--bg-primary);
            border-radius: var(--radius);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            transition: box-shadow 0.3s ease;
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-light);
            background: var(--bg-secondary);
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        /* Products Section */
        .product-item {
            display: flex;
            gap: 1rem;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-light);
            transition: background-color 0.2s;
        }

        .product-item:hover {
            background: var(--bg-secondary);
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-image {
            width: 80px;
            height: 80px;
            border-radius: var(--radius-sm);
            object-fit: cover;
            box-shadow: var(--shadow-sm);
        }

        .product-details {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .product-name {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .product-price {
            font-size: 1.125rem;
            font-weight: 700;
            color: var(--primary);
        }

        .product-quantity {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .out-of-stock {
            background: #fef2f2;
            color: var(--danger);
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-block;
            margin-top: 0.5rem;
        }

        /* Address Section */
        .address-grid {
            display: grid;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .address-card {
            position: relative;
            border: 2px solid var(--border);
            border-radius: var(--radius);
            padding: 1.25rem;
            cursor: pointer;
            transition: all 0.3s ease;
            background: var(--bg-primary);
        }

        .address-card:hover {
            border-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .address-card.selected {
            border-color: var(--primary);
            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
        }

        .address-radio {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 20px;
            height: 20px;
            accent-color: var(--primary);
        }

        .address-info h4 {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .address-info p {
            color: var(--text-secondary);
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
        }

        .address-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: var(--radius-sm);
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-secondary);
        }

        .btn-outline:hover {
            background: var(--bg-secondary);
            border-color: var(--primary);
            color: var(--primary);
        }

        .btn-add {
            width: 100%;
            background: var(--bg-secondary);
            color: var(--primary);
            border: 2px dashed var(--border);
            padding: 1rem;
            font-weight: 600;
        }

        .btn-add:hover {
            background: #eff6ff;
            border-color: var(--primary);
        }

        /* Coupon Section */
        .coupon-container {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .form-select,
        .form-input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: var(--radius-sm);
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }

        .form-select:focus,
        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
        }

        /* Order Summary */
        .order-summary {
            position: sticky;
            top: 2rem;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border-light);
        }

        .summary-row:last-child {
            border-bottom: none;
        }

        .summary-total {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
            border-top: 2px solid var(--border);
            padding-top: 1rem;
            margin-top: 1rem;
        }

        .discount-row {
            color: var(--accent);
            font-weight: 600;
        }

        /* Payment Section */
        .payment-methods {
            display: grid;
            gap: 0.75rem;
            margin: 1.5rem 0;
        }

        .payment-option {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            border: 2px solid var(--border);
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: all 0.2s;
            user-select: none;
        }

        .payment-option:hover {
            border-color: var(--primary);
            background: var(--bg-secondary);
        }

        .payment-option.selected {
            border-color: var(--primary);
            background: #eff6ff;
        }

        .payment-icon {
            width: 24px;
            height: 24px;
            color: var(--primary);
        }

        .btn-checkout {
            width: 100%;
            padding: 1rem 2rem;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
            color: white;
            border: none;
            border-radius: var(--radius);
            font-size: 1.125rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }

        .btn-checkout:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-checkout:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Modal Styles */
        .modal-content {
            border-radius: var(--radius);
            border: none;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-light);
            border-radius: var(--radius) var(--radius) 0 0;
        }

        .modal-title {
            font-weight: 600;
            color: var(--text-primary);
        }

        .form-label {
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .form-control {
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: var(--radius-sm);
            transition: border-color 0.2s;
        }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
        }

        .form-control.is-invalid {
            border-color: var(--danger);
        }

        .form-control.is-invalid:focus {
            border-color: var(--danger);
            box-shadow: 0 0 0 3px rgb(239 68 68 / 0.1);
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875rem;
            color: var(--danger);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .product-item {
                flex-direction: column;
                gap: 0.75rem;
            }

            .product-image {
                width: 60px;
                height: 60px;
            }

            .address-actions {
                flex-direction: column;
            }

            .coupon-container {
                flex-direction: column;
            }
        }

        /* Loading Animation */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Toast Notifications */
        #toast-container {
            position: fixed;
            top: 2rem;
            right: 2rem;
            z-index: 9999;
        }

        .toast {
            background: var(--bg-primary);
            border-radius: var(--radius);
            box-shadow: var(--shadow-lg);
            padding: 1rem 1.5rem;
            margin-bottom: 0.5rem;
            border-left: 4px solid var(--primary);
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</head>

<body>
    <%- include('../partials/user/header.ejs') %>
        <div class="checkout-container container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/"><i class="fas fa-home"></i> Home</a>
                <span class="separator">/</span>
                <a href="/cart"><i class="fas fa-shopping-cart"></i> Cart</a>
                <span class="separator">/</span>
                <span class="current"><i class="fas fa-credit-card"></i> Checkout</span>
            </nav>

            <div class="checkout-layout">
                <!-- Main Content -->
                <div class="main-content">
                    <!-- Products Section -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-box"></i>
                                Order Items
                            </h2>
                        </div>
                        <div class="card-body" style="padding: 0;">
                            <% cart.forEach(function(item) { %>
                                <% const product=item.productId || {}; %>
                                    <div class="product-item">
                                        <a href="/productDetails?product=<%= product._id %>">
                                            <img src="<%= product.productImage[0] %>" class="product-image"
                                                alt="<%= product.productName %>">
                                        </a>
                                        <div class="product-details">
                                            <div>
                                                <h4 class="product-name">
                                                    <%= product.productName || 'Product Name Missing' %>
                                                </h4>
                                                <p class="product-quantity">Quantity: <%= item.quantity || 1 %>
                                                </p>
                                                <% if (product.quantity===0) { %>
                                                    <span class="out-of-stock">
                                                        <i class="fas fa-exclamation-triangle"></i> Out of Stock
                                                    </span>
                                                    <% } %>
                                                        <% if (item.offerInfo) { %>
                                                            <div class="offer-info"
                                                                style="color: #0d8507; font-size: 0.95em; margin-top: 4px;">
                                                                <i class="fas fa-bolt"></i>
                                                                Offer: <%= item.offerInfo.offerName %> -
                                                                    <%= item.offerInfo.discountType==='percentage' ?
                                                                        item.offerInfo.discountValue + '%' : '₹' +
                                                                        item.offerInfo.discountValue %> OFF
                                                                        (You save ₹<%= (item.offerInfo.discount *
                                                                            item.quantity).toFixed(2) %>)
                                                            </div>
                                                            <% } %>
                                            </div>
                                            <div class="product-price">₹<%= product.salePrice ?
                                                    product.salePrice.toFixed(2) : '0.00' %>
                                            </div>
                                        </div>
                                    </div>
                                    <% }); %>
                        </div>
                    </div>

                    <!-- Address Section -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fas fa-map-marker-alt"></i>
                                Delivery Address
                            </h3>
                        </div>
                        <div class="card-body">
                            <% if (addresses.length> 0) { %>
                                <div class="address-grid">
                                    <% addresses.forEach(function(address) { %>
                                        <div class="address-card <%= address.default ? 'selected' : '' %>"
                                            data-address-id="<%= address._id %>">
                                            <input type="radio" name="address" value="<%= address._id %>"
                                                class="address-radio" <%=address.default ? 'checked' : '' %>>
                                            <div class="address-info">
                                                <h4><i class="fas fa-user"></i>
                                                    <%= address.name %>
                                                </h4>
                                                <p><i class="fas fa-phone"></i>
                                                    <%= address.phone %>
                                                </p>
                                                <p><i class="fas fa-location-dot"></i>
                                                    <%= address.city %>, <%= address.state %>
                                                            <%= address.pincode %>
                                                </p>
                                            </div>
                                            <div class="address-actions">
                                                <button class="btn btn-outline"
                                                    onclick="openEditAddressModal('<%= address._id %>')">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="btn btn-danger"
                                                    onclick="deleteAddress('<%= address._id %>')">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <% } else { %>
                                    <div style="text-align: center; padding: 2rem; color: var(--text-secondary);">
                                        <i class="fas fa-map-marker-alt"
                                            style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                                        <p>No addresses found. Please add an address to continue.</p>
                                    </div>
                                    <% } %>

                                        <button class="btn btn-add" onclick="openAddAddressModal()">
                                            <i class="fas fa-plus"></i>
                                            Add New Address
                                        </button>
                        </div>
                    </div>

                    <!-- Coupon Section -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fas fa-ticket-alt"></i>
                                Apply Coupon
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="coupon-container">
                                <select id="couponDropdown" class="form-select">
                                    <option value="">Select a Coupon</option>
                                    <% if (coupons && coupons.length> 0) { %>
                                        <% coupons.forEach(coupon=> { %>
                                            <option value="<%= coupon.code %>">
                                                <%= coupon.code %> -
                                                    <% if (coupon.type==='percentage' ) { %>
                                                        <%= coupon.discount %>% off
                                                            <% } else if (coupon.type==='flat' ) { %>
                                                                ₹<%= coupon.discount %> off
                                                                    <% } %>
                                                                        (Expires: <%= new
                                                                            Date(coupon.expiryDate).toLocaleDateString()
                                                                            %>)
                                            </option>
                                            <% }); %>
                                                <% } else { %>
                                                    <option disabled>No coupons available</option>
                                                    <% } %>
                                </select>
                                <button id="applyCoupon" class="btn btn-primary">
                                    <i class="fas fa-check"></i> Apply
                                </button>
                            </div>
                            <div id="couponFeedback" style="margin-top: 10px; color: var(--danger); display: none;">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="order-summary">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-receipt"></i>
                                Order Summary
                            </h2>
                        </div>
                        <div class="card-body">
                            <div class="summary-row">
                                <span>Subtotal</span>
                                <span>₹<%= subtotal.toFixed(2) %></span>
                            </div>
                            <div class="summary-row">
                                <span>Delivery</span>
                                <span>
                                    <%= shipping===0 ? 'Free' : '₹' + shipping.toFixed(2) %>
                                </span>
                            </div>
                            <% if (offerDiscount && offerDiscount> 0) { %>
                                <div class="summary-row discount-row" id="offerDiscountRow" style="color: #0d8507;">
                                    <span><i class="fas fa-bolt"></i> Offer Discount</span>
                                    <span id="offerDiscountAmount">-₹<%= offerDiscount.toFixed(2) %></span>
                                </div>
                                <% } %>
                                    <div class="summary-row discount-row" id="discountRow" style="display: none;">
                                        <span><i class="fas fa-tag"></i> Coupon Discount</span>
                                        <span id="discountAmount">₹0.00</span>
                                    </div>
                                    <div class="summary-row summary-total">
                                        <span>Total</span>
                                        <span id="finalTotal">₹<%= (offerTotal + shipping).toFixed(2) %></span>
                                    </div>

                                    <!-- Payment Section -->
                                    <div style="margin-top: 2rem;">
                                        <h3 style="margin-bottom: 1rem; font-weight: 600;">
                                            <i class="fas fa-credit-card"></i> Payment Method
                                        </h3>
                                        <div class="payment-methods">
                                            <div class="payment-option" data-payment="cod">
                                                <input type="radio" name="payment_method" value="cod"
                                                    style="display: none;">
                                                <i class="fas fa-money-bill-wave payment-icon"></i>
                                                <span>Cash on Delivery</span>
                                            </div>
                                            <div class="payment-option" data-payment="razorpay">
                                                <input type="radio" name="payment_method" value="razorpay"
                                                    style="display: none;">
                                                <i class="fas fa-credit-card payment-icon"></i>
                                                <span>Razorpay</span>
                                            </div>
                                            <div class="payment-option" data-payment="Wallet">
                                                <input type="radio" name="payment_method" value="Wallet"
                                                    style="display: none;">
                                                <i class="fas fa-wallet payment-icon"></i>
                                                <span>Wallet</span>
                                            </div>
                                        </div>
                                    </div>

                                    <div id="outOfStockAlert" style="display:none; margin-bottom:1rem;"></div>
                                    <button class="btn-checkout" type="button">
                                        <i class="fas fa-lock"></i>
                                        Place Order Securely
                                    </button>

                                    <div class="loading-spinner"
                                        style="display: none; margin-top: 1rem; text-align: center;">
                                        <div class="loading-spinner"></div>
                                    </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Toast Container -->
        <div id="toast-container"></div>

        <!-- Add Address Modal -->
        <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addAddressModalLabel">
                            <i class="fas fa-plus"></i> Add New Address
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form id="addAddressForm">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="addressType" class="form-label">Address Type</label>
                                <select class="form-control" id="addressType" name="addressType">
                                    <option value="" disabled selected>Select Address Type</option>
                                    <option value="Home">🏠 Home</option>
                                    <option value="Work">🏢 Work</option>
                                    <option value="Other">📍 Other</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="name" name="name"
                                    placeholder="Enter your full name">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <input type="text" class="form-control" id="phone" name="phone"
                                    placeholder="Enter your phone number">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="city" class="form-label">City</label>
                                <input type="text" class="form-control" id="city" name="city"
                                    placeholder="Enter your city">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="state" class="form-label">State</label>
                                <input type="text" class="form-control" id="state" name="state"
                                    placeholder="Enter your state">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="pincode" class="form-label">Pincode</label>
                                <input type="text" class="form-control" id="pincode" name="pincode"
                                    placeholder="Enter your pincode">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Save Address
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Edit Address Modal -->
        <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editAddressModalLabel">
                            <i class="fas fa-edit"></i> Edit Address
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form id="editAddressForm">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="editAddressType" class="form-label">Address Type</label>
                                <select class="form-control" id="editAddressType" name="addressType">
                                    <option value="" disabled>Select Address Type</option>
                                    <option value="Home">🏠 Home</option>
                                    <option value="Work">🏢 Work</option>
                                    <option value="Other">📍 Other</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="editName" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="editName" name="name"
                                    placeholder="Enter your full name">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="editPhone" class="form-label">Phone Number</label>
                                <input type="text" class="form-control" id="editPhone" name="phone"
                                    placeholder="Enter your phone number">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="editCity" class="form-label">City</label>
                                <input type="text" class="form-control" id="editCity" name="city"
                                    placeholder="Enter your city">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="editState" class="form-label">State</label>
                                <input type="text" class="form-control" id="editState" name="state"
                                    placeholder="Enter your state">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="mb-3">
                                <label for="editPincode" class="form-label">Pincode</label>
                                <input type="text" class="form-control" id="editPincode" name="pincode"
                                    placeholder="Enter your pincode">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <%- include('../partials/user/footer.ejs') %>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    initializePaymentMethods();
                    showOutOfStockAlert();
                });

                function initializePaymentMethods() {
                    const paymentOptions = document.querySelectorAll('.payment-option');

                    if (paymentOptions.length > 0) {
                        const firstOption = paymentOptions[0];
                        firstOption.classList.add('selected');
                        const firstRadio = firstOption.querySelector('input[type="radio"]');
                        if (firstRadio) {
                            firstRadio.checked = true;
                        }
                    }

                    paymentOptions.forEach(option => {
                        option.addEventListener('click', function () {
                            paymentOptions.forEach(opt => opt.classList.remove('selected'));
                            this.classList.add('selected');
                            const radio = this.querySelector('input[type="radio"]');
                            if (radio) {
                                radio.checked = true;
                            }
                        });
                    });
                }

                function openAddAddressModal() {
                    const modal = new bootstrap.Modal(document.getElementById('addAddressModal'));
                    modal.show();
                    document.getElementById('addAddressForm').reset();
                    clearValidationErrors('addAddressForm');
                }

                function openEditAddressModal(addressId) {
                    const modal = new bootstrap.Modal(document.getElementById('editAddressModal'));
                    modal.show();

                    // Fetch address details
                    fetch(`/edit-address/${addressId}`)
                        .then(response => response.json())
                        .then(address => {
                            document.getElementById('editAddressType').value = address.addressType || 'Home';
                            document.getElementById('editName').value = address.name;
                            document.getElementById('editPhone').value = address.phone;
                            document.getElementById('editCity').value = address.city;
                            document.getElementById('editState').value = address.state;
                            document.getElementById('editPincode').value = address.pincode;

                            // Set form action
                            document.getElementById('editAddressForm').setAttribute('data-address-id', address._id);
                        })
                        .catch(error => {
                            console.error('Error fetching address:', error);
                            showToast('Error loading address details', 'error');
                        });
                }

                function deleteAddress(addressId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you want to delete this address?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/user/delete-address/${addressId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        showToast('Address deleted successfully', 'success');
                                        // Remove the address card from DOM
                                        const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
                                        if (addressCard) {
                                            addressCard.remove();
                                        }
                                        // Check if no addresses left
                                        const remainingAddresses = document.querySelectorAll('.address-card');
                                        if (remainingAddresses.length === 0) {
                                            location.reload(); // Reload to show "no addresses" message
                                        }
                                    } else {
                                        showToast(data.message || 'Error deleting address', 'error');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error deleting address:', error);
                                    showToast('Error deleting address', 'error');
                                });
                        }
                    });
                }

                function clearValidationErrors(formId) {
                    const form = document.getElementById(formId);
                    const inputs = form.querySelectorAll('.form-control, .form-select');
                    inputs.forEach(input => {
                        input.classList.remove('is-invalid');
                        const feedback = input.nextElementSibling;
                        if (feedback && feedback.classList.contains('invalid-feedback')) {
                            feedback.textContent = '';
                        }
                    });
                }

                function validateForm(form) {
                    let isValid = true;
                    const fields = ['name', 'phone', 'city', 'state', 'pincode', 'addressType'];

                    fields.forEach(field => {
                        const input = form.querySelector(`[name="${field}"]`);
                        const feedback = input.nextElementSibling;

                        if (!input.value.trim()) {
                            input.classList.add('is-invalid');
                            feedback.textContent = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
                            isValid = false;
                        } else {
                            input.classList.remove('is-invalid');
                            feedback.textContent = '';
                        }
                    });

                    // Phone validation
                    const phone = form.querySelector('[name="phone"]').value.trim();
                    const phoneInput = form.querySelector('[name="phone"]');
                    const phoneFeedback = phoneInput.nextElementSibling;
                    const phonePattern = /^[0-9]{10}$/;

                    if (!phonePattern.test(phone)) {
                        phoneInput.classList.add('is-invalid');
                        phoneFeedback.textContent = 'Phone number must be 10 digits';
                        isValid = false;
                    }

                    // Pincode validation
                    const pincode = form.querySelector('[name="pincode"]').value.trim();
                    const pincodeInput = form.querySelector('[name="pincode"]');
                    const pincodeFeedback = pincodeInput.nextElementSibling;
                    const pincodePattern = /^[0-9]{6}$/;

                    if (!pincodePattern.test(pincode)) {
                        pincodeInput.classList.add('is-invalid');
                        pincodeFeedback.textContent = 'Pincode must be 6 digits';
                        isValid = false;
                    }

                    return isValid;
                }

                function showToast(message, type = 'info') {
                    const toastContainer = document.getElementById('toast-container');
                    const toast = document.createElement('div');
                    toast.textContent = message;
                    toast.style.backgroundColor = type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6';
                    toast.style.color = 'white';
                    toast.style.padding = '10px 20px';
                    toast.style.marginBottom = '10px';
                    toast.style.borderRadius = '5px';
                    toast.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
                    toast.style.fontSize = '14px';

                    toastContainer.appendChild(toast);

                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                }

                // Add Address Form Handler
                document.getElementById('addAddressForm').addEventListener('submit', function (e) {
                    e.preventDefault();

                    if (!validateForm(this)) {
                        return;
                    }

                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);

                    fetch('/add-address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                showToast('Address added successfully', 'success');
                                bootstrap.Modal.getInstance(document.getElementById('addAddressModal')).hide();
                                location.reload(); // Reload to show new address
                            } else {
                                showToast(result.message || 'Error adding address', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error adding address:', error);
                            showToast('Error adding address', 'error');
                        });
                });

                // Edit Address Form Handler
                document.getElementById('editAddressForm').addEventListener('submit', function (e) {
                    e.preventDefault();

                    if (!validateForm(this)) {
                        return;
                    }

                    const addressId = this.getAttribute('data-address-id');
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);

                    fetch(`/edit-address/${addressId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                showToast('Address updated successfully', 'success');
                                bootstrap.Modal.getInstance(document.getElementById('editAddressModal')).hide();
                                location.reload(); // Reload to show updated address
                            } else {
                                showToast(result.message || 'Error updating address', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error updating address:', error);
                            showToast('Error updating address', 'error');
                        });
                });

                // Address selection handler
                document.addEventListener('change', function (e) {
                    if (e.target.name === 'address') {
                        // Remove selected class from all address cards
                        document.querySelectorAll('.address-card').forEach(card => {
                            card.classList.remove('selected');
                        });

                        // Add selected class to the chosen address card
                        const selectedCard = e.target.closest('.address-card');
                        if (selectedCard) {
                            selectedCard.classList.add('selected');
                        }

                        // Hide any address selection error
                        const addressError = document.querySelector('.address-error');
                        if (addressError) {
                            addressError.style.display = 'none';
                        }
                    }
                });

                // Place Order Button Handler
                document.querySelector('.btn-checkout').addEventListener('click', async function (e) {
                    e.preventDefault();

                    const cart = JSON.parse('<%- JSON.stringify(cart) %>');
                    console.log(cart);
                    const subtotal = `<%= subtotal %>`;
                    const shipping = `<%= shipping %>`;

                    const selectedAddressElement = document.querySelector('input[name="address"]:checked');
                    if (!selectedAddressElement) {
                        showToast("Please select a delivery address", 'error');
                        return;
                    }

                    const addressContainer = selectedAddressElement.closest('.address-card');
                    const addressDetails = {
                        id: selectedAddressElement.value,
                        name: addressContainer.querySelector('h4').innerText,
                        phone: addressContainer.querySelector('p:nth-of-type(1)').innerText,
                        cityStatePincode: addressContainer.querySelector('p:nth-of-type(2)').innerText,
                    };

                    const selectedPaymentMethod = document.querySelector('input[name="payment_method"]:checked');
                    if (!selectedPaymentMethod) {
                        showToast("Please select a payment method", 'error');
                        return;
                    }

                    const paymentMethod = selectedPaymentMethod.value;

                    const hasOutOfStock = cart.some(item => item.productId.quantity === 0);
                    console.log(hasOutOfStock);
                    if (hasOutOfStock) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Out of Stock',
                            text: 'One or more products in your cart are out of stock. Please remove them before proceeding.',
                        });
                        return;
                    }

                    const totalPriceElement = document.querySelector('.summary-total span:last-child');
                    const updatedTotalPrice = parseFloat(totalPriceElement.textContent.replace('₹', '').replace(',', ''));

                    const orderDetails = {
                        products: cart.map(item => ({
                            productId: item.productId._id,
                            quantity: item.quantity,
                        })),
                        totalPrice: updatedTotalPrice,
                        discount: discount || 0,
                        address: addressDetails,
                        paymentMethod: paymentMethod,
                    };
                    // Show loading state
                    const checkoutBtn = this;
                    const originalText = checkoutBtn.innerHTML;
                    checkoutBtn.innerHTML = '<div class="loading-spinner"></div> Processing...';
                    checkoutBtn.disabled = true;

                    try {
                        if (paymentMethod === 'cod') {
                            const response = await fetch('/checkout', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(orderDetails)
                            });

                            if (!response.ok) {
                                throw new Error('Failed to place order');
                            }

                            const data = await response.json();
                            if (data.orderDetails) {
                                Swal.fire({
                                    title: "Order Placed Successfully!",
                                    text: "Your order will be delivered soon",
                                    icon: "success",
                                    timer: 3000,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = `/order-success/${data.orderDetails._id}`;
                                });
                            }
                        } else if (paymentMethod === 'razorpay') {
                            const response = await fetch('/create-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(orderDetails)
                            });

                            const data = await response.json();
                            if (data.success) {
                                var options = {
                                    "key": "rzp_test_i5tp6dXFIpR66Q",
                                    "amount": data.order.amount,
                                    "currency": "INR",
                                    "name": "shoe vault",
                                    "description": "Test Transaction",
                                    "order_id": data.order.id,
                                    "handler": async function (response) {
                                        try {
                                            const verificationResponse = await fetch('/place-order', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    payment_id: response.razorpay_payment_id,
                                                    order_id: response.razorpay_order_id,
                                                    signature: response.razorpay_signature,
                                                    products: orderDetails.products,
                                                    totalPrice: orderDetails.totalPrice,
                                                    address: orderDetails.address,
                                                    paymentMethod: orderDetails.paymentMethod,
                                                }),
                                            });

                                            const verificationResult = await verificationResponse.json();
                                            if (verificationResult.success) {
                                                Swal.fire({
                                                    title: "Order Placed Successfully!",
                                                    text: "Your order will be delivered soon",
                                                    icon: "success",
                                                    timer: 3000,
                                                    showConfirmButton: false
                                                });

                                                window.location.href = `/razorpay-successpage/${verificationResult.orderId}`;
                                            } else {
                                                Swal.fire("Payment Failed", "Something went wrong!", "error");
                                            }
                                        } catch (error) {
                                            console.error("Error verifying payment:", error);
                                            Swal.fire("Payment Failed", "Something went wrong!", "error");
                                        }
                                    },
                                };

                                const rzp1 = new Razorpay(options);
                                rzp1.open();
                            } else {
                                console.log("API Failed");
                                showToast("Failed to create payment order", 'error');
                            }
                        } else if (paymentMethod === "Wallet") {
                            const response = await fetch('/paywallet', {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(orderDetails)
                            });

                            const data = await response.json();
                            if (data.orderId) {
                                Swal.fire({
                                    title: "Order Placed Successfully!",
                                    text: "Your order will be delivered soon.",
                                    icon: "success",
                                    timer: 3000,
                                    showConfirmButton: false
                                });
                                window.location.href = `/order-success/${data.orderId}`;
                            } else {
                                Swal.fire("Payment Failed", data.message || "Something went wrong!", "error");
                            }
                        }
                    } catch (error) {
                        console.error("Error processing order:", error);
                        showToast("Error processing order", 'error');
                    } finally {
                        // Reset button state
                        checkoutBtn.innerHTML = originalText;
                        checkoutBtn.disabled = false;
                    }
                });

                let discount = 0; // Initialize discount
                const offerDiscount = parseFloat(`<%= offerDiscount %>`);
                const offerTotal = parseFloat(`<%= offerTotal %>`);
                const shipping = parseFloat(`<%= shipping %>`);

                function updateFinalTotal() {
                    const total = offerTotal + shipping - discount;
                    document.getElementById('finalTotal').textContent = `₹${total.toFixed(2)}`;
                }

                // Update coupon application logic to subtract from offerTotal
                document.getElementById('applyCoupon').addEventListener('click', async () => {
                    const couponCode = document.getElementById('couponDropdown').value.trim();
                    const subtotal = parseFloat(`<%= subtotal %>`);

                    if (!couponCode) {
                        document.getElementById('couponFeedback').textContent = "Please enter a coupon code.";
                        document.getElementById('couponFeedback').style.display = "block";
                        return;
                    }

                    try {
                        const response = await fetch('/validate-coupon', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ couponcode: couponCode, subtotal: offerTotal }),
                        });

                        const data = await response.json();
                        if (data.success) {
                            discount = data.discount; // Update the discount value
                            document.getElementById('discountRow').style.display = "flex";
                            document.getElementById('discountAmount').textContent = `-₹${data.discount.toFixed(2)}`;
                            document.getElementById('couponFeedback').style.display = "none";
                            updateFinalTotal();
                            showToast(data.message, 'success');
                        } else {
                            document.getElementById('couponFeedback').textContent = data.message;
                            document.getElementById('couponFeedback').style.display = "block";
                        }
                    } catch (error) {
                        console.error('Error applying coupon:', error);
                        document.getElementById('couponFeedback').textContent = "Something went wrong. Please try again.";
                        document.getElementById('couponFeedback').style.display = "block";
                    }
                });

                function showOutOfStockAlert() {
                    const cart = JSON.parse('<%- JSON.stringify(cart) %>');
                    console.log(cart);
                    const hasOutOfStock = cart.some(item => item.productId.quantity === 0);
                    const alertDiv = document.getElementById('outOfStockAlert');
                    const checkoutBtn = document.querySelector('.btn-checkout');
                    if (hasOutOfStock) {
                        alertDiv.style.display = 'block';
                        alertDiv.innerHTML = `
                            <div style="background:#fee2e2; color:#b91c1c; border:1px solid #fca5a5; border-radius:8px; padding:12px; font-weight:600; display:flex; align-items:center; gap:8px;">
                                <i class="fas fa-exclamation-triangle"></i>
                                One or more products in your cart are out of stock (stock is zero). Please remove them before placing your order.
                            </div>
                        `;
                        checkoutBtn.disabled = true;
                    } else {
                        alertDiv.style.display = 'none';
                        checkoutBtn.disabled = false;
                    }
                }

            </script>

</body>

</html>